[
  "

-----    classAdd.vue     -------

<script setup lang="ts"></script>
<template>
  <div class="red bg-red w-[100%] leading-[20px]">
    nihao
  </div>
  <div class="yellow !bg-yellow w-[100%] h-[100%]">
    hi
  </div>
</template>
<style scoped></style>
",
  "

-----    classAttribute.vue     -------

<script setup lang="ts"></script>
<template>
  <div class="red bg-red w-[100%] h-[100%]" name="hi" haha>
    nihao
  </div>
  <div class="yellow h-[100%]">
    hi
  </div>
</template>
<style scoped></style>
",
  "

-----    classChild.vue     -------

<script setup lang="ts"></script>
<template>
  <div class="red bg-red w-[100%] leading-[20px]">
    <div class="yellow bg-red w-[100%]">
      hi
    </div>
  </div>
</template>
<style scoped></style>
",
  "

-----    classCombine.vue     -------

<script setup lang="ts"></script>
<template>
  <div class="bg-red w-[100%] leading-[20px]">
    <div class="red yellow bg-red w-[100%]">
      hi
    </div>
  </div>
</template>
<style scoped></style>
",
  "

-----    classSpace.vue     -------

<script setup lang="ts"></script>
<template>
  <div class="red bg-red w-[100%] leading-[20px]">
    <div class="yellow !bg-red w-[100%]">
      hi
    </div>
  </div>
</template>
<style scoped></style>
",
  "

-----    classTail.vue     -------

<script setup lang="ts"></script>
<template>
  <div class="container focus-within:bg-red focus-within:w-[100%]">
    <div class="red bg-red w-[100%] leading-[20px]">
      nihao
    </div>
    <div class="yellow">
      hi
    </div>
  </div>
</template>
<style scoped></style>
",
  "

-----    classWeight.vue     -------

<script setup lang="ts"></script>
<template>
  <div class="red bg-yellow w-[100%]">
    nihao
  </div>
  <div>hi</div>
</template>
<style scoped></style>
",
  "

-----    hover.vue     -------

<script setup lang="ts"></script>
<template>
  <div class="bg-red w-[100%] leading-[20px]">
    <div class="red hover:text-yellow">
      hi
    </div>
  </div>
</template>
<style scoped></style>
",
  "

-----    media.vue     -------

<script setup lang="ts"></script>

<template>
  <div class="red sm:bg-red max-2xl:bg-red bg-red">
    nihao
  </div>
</template>

<style scoped>
@media (min-width: 120px) {
  .red {
    background-color: red;
  }
}
</style>
",
  "

-----    sass-import.vue     -------

<template>
  <div class="setting-cell" @click.stop="click">
    <div class="setting__left">
      <div class="setting__left__title">
        {{ title }}
      </div>
      <div class="setting__left__subtitle" v-if="subtitle">
        {{ subtitle }}
      </div>
    </div>
    <div class="setting-cell__right">
      <slot></slot>
    </div>
  </div>
</template>

<script setup lang="ts">
const props = defineProps<{
  title: string
  subtitle?: string
}>()
//click
const emit = defineEmits(['click'])
const click = () => {
  emit('click')
}
</script>

<style scoped>
@import './SettingCell.scss';
</style>
",
  "

-----    styleWeight.vue     -------

<script setup lang="ts"></script>
<template>
  <div class="red bg-pink bg-red" style="hi:123">
    nihao
  </div>
  <div class="yellow bg-yellow">
    hi
  </div>
</template>
<style scoped></style>
",
  "

-----    test-1.vue     -------

<script setup lang="ts"></script>
<template>
  <div bg="red" w="[100%]" leading20px>
    <div
      flex
      flex-1
      h-100px
      bg-red
      class="container scale-[0.8_0.9]"
     
    >
      <div flex-1 h-100px bg-red />
      <div />
    </div>
  </div>
</template>
<style scoped></style>
",
  "

-----    test.vue     -------

<script setup lang="ts"></script>
<template>
  <div
    class="container bg-red w-[100%] leading-[20px] w-[100%] flex"
   
  >
    <div class="flex-1 h-[100px] bg-red" />
    <div class="flex-1 h-[100px] bg-red" />
  </div>
</template>
<style scoped></style>
",
  "

-----    vue.tsx     -------

import { defineComponent, ref } from 'vue'
import './index.css'

export const component = defineComponent({
  name: 'Component',
  props: {
    title: {
      type: String,
      default: '',
    },
    content: {
      type: String,
      default: '',
    },
  },
  setup(props) {
    const count = ref(0)
    const increment = () => count.value++
    return () => (
      <div>
        <h1 className="red bg-red" style="hi:123">{props.title}</h1>
        <p>{props.content}</p>
        <div onClick={increment}>
          count: {count.value}
        </div>
      </div>
    )
  },
})
",
]